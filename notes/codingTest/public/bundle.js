/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/shortest_path.ts":
/*!******************************!*\
  !*** ./src/shortest_path.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst INF = Infinity;\nconst graph = [\n    [],\n    [\n        [2, 2],\n        [3, 5],\n        [4, 1],\n    ], // 1번 노드에서 2로 가는 비용 = 2, 3으로 가는 비용 = 5 ...\n    [\n        [3, 3],\n        [4, 2],\n    ],\n    [\n        [2, 3],\n        [6, 5],\n    ],\n    [\n        [3, 3],\n        [5, 1],\n    ],\n    [\n        [3, 1],\n        [6, 2],\n    ],\n    [],\n];\n// console.log(\"hello\");\nconst V = graph.length - 1; // 노드 개수\nconst S = 1; // 시작 노드\nconst visited1 = Array(V + 1).fill(false);\nconst distance1 = Array(V + 1).fill(INF);\nfunction getSmallestNode() {\n    let min = INF;\n    let index = 0;\n    for (let i = 1; i <= V; i++) {\n        if (distance1[i] < min && !visited1[i]) {\n            min = distance1[i];\n            index = i;\n        }\n    }\n    return index;\n}\nfunction simpleDijkstra(start) {\n    // 시작 노드에 대하여 초기화\n    visited1[start] = true;\n    distance1[start] = 0;\n    for (let i = 0; i < graph[start].length; i++) {\n        const [node, cost] = graph[start][i];\n        distance1[node] = cost;\n    }\n    // 시작 노드를 제외한 전체 n - 1개의 노드에 대해 반복\n    for (let i = 0; i < V - 1; i++) {\n        const now = getSmallestNode();\n        visited1[now] = true;\n        for (let j = 0; j < graph[now].length; j++) {\n            const [n, c] = graph[now][j];\n            const cost = distance1[now] + c;\n            if (cost < distance1[n]) {\n                distance1[n] = cost;\n            }\n        }\n    }\n}\nconsole.time(\"simpleDijkstra\");\nsimpleDijkstra(S);\nconsole.timeEnd(\"simpleDijkstra\");\nfor (let i = 1; i <= V; i++) {\n    if (distance1[i] === INF) {\n        console.log(\"도달할 수 없습니다.\");\n    }\n    else {\n        console.log(i, distance1[i]);\n    }\n}\n// 0.116ms\n/*\nclass PriorityQueue {\n  queue: [number, number][];\n  constructor() {\n    this.queue = [];\n  }\n  add([distance, node]: [number, number]) {\n    this.queue.push([distance, node]);\n    this.queue.sort((a, b) => a[0] - b[0]);\n  }\n  pop() {\n    return this.queue.shift();\n  }\n  size() {\n    return this.queue.length;\n  }\n}\n*/\n// 0.210ms\nclass PriorityQueue {\n    queue; // [distance, node]\n    constructor() {\n        this.queue = [];\n    }\n    size() {\n        return this.queue.length;\n    }\n    swap(index1, index2) {\n        [this.queue[index1], this.queue[index2]] = [\n            this.queue[index2],\n            this.queue[index1],\n        ];\n    }\n    add([distance, node]) {\n        this.queue.push([distance, node]);\n        this.heapifyUp();\n    }\n    heapifyUp() {\n        let index = this.queue.length - 1; // 새로운 노드의 위치\n        let parentIndex = Math.floor((index - 1) / 2); // 새로운 노드의 부모 노드의 위치\n        while (this.queue[parentIndex] &&\n            this.queue[parentIndex][0] > this.queue[index][0]) {\n            this.swap(index, parentIndex);\n            index = parentIndex;\n            parentIndex = Math.floor((index - 1) / 2);\n        }\n    }\n    pop() {\n        if (this.queue.length === 0) {\n            return;\n        }\n        if (this.queue.length === 1) {\n            return this.queue.shift();\n        }\n        const value = this.queue[0];\n        this.queue[0] = this.queue.pop();\n        this.heapifyDown();\n        return value;\n    }\n    heapifyDown() {\n        let index = 0;\n        let leftIndex = index * 2 + 1;\n        let rightIndex = index * 2 + 2;\n        while ((this.queue[leftIndex] &&\n            this.queue[leftIndex][0] < this.queue[index][0]) ||\n            (this.queue[rightIndex] &&\n                this.queue[rightIndex][0] < this.queue[index][0])) {\n            let smallerIndex = leftIndex;\n            if (this.queue[rightIndex] &&\n                this.queue[rightIndex][0] < this.queue[leftIndex][0]) {\n                smallerIndex = rightIndex;\n            }\n            this.swap(index, smallerIndex);\n            index = smallerIndex;\n            leftIndex = index * 2 + 1;\n            rightIndex = index * 2 + 2;\n        }\n    }\n}\nconst distance2 = Array(V + 1).fill(INF);\nfunction advancedDijkstra(start) {\n    const queue = new PriorityQueue();\n    queue.add([0, start]);\n    distance2[start] = 0;\n    while (queue.size() > 0) {\n        const [dist, now] = queue.pop();\n        if (distance2[now] < dist) {\n            continue;\n        }\n        for (let i = 0; i < graph[now].length; i++) {\n            const [n, d] = graph[now][i];\n            const cost = dist + d;\n            if (cost < distance2[n]) {\n                distance2[n] = cost;\n                queue.add([cost, n]);\n            }\n        }\n    }\n}\nconsole.time(\"advancedDijkstra\");\nadvancedDijkstra(S);\nconsole.timeEnd(\"advancedDijkstra\");\nfor (let i = 1; i <= V; i++) {\n    if (distance2[i] === INF) {\n        console.log(\"도달할 수 없습니다.\");\n    }\n    else {\n        console.log(i, distance2[i]);\n    }\n}\n// 미래 도시\n// 1번 -> K번 최단 거리\n// K번 -> X번 최단 거리\nconst inputs = [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [2, 4],\n    [3, 4],\n    [3, 5],\n    [4, 5],\n    [4, 6],\n];\nconst X = 4;\nconst K = 5;\nfunction futureCity(inp, middle, end) {\n    const cityGraph = Array(101).fill([]);\n    for (let i = 0; i < inp.length; i++) {\n        const [a, b] = inp[i];\n        cityGraph[a] = [...cityGraph[a], b];\n        cityGraph[b] = [...cityGraph[b], a];\n    }\n    const fromStart = dij(1, cityGraph);\n    const fromMiddle = dij(middle, cityGraph);\n    return fromStart[middle] + fromMiddle[end];\n}\nfunction dij(start, gr) {\n    const dists = Array(101).fill(INF);\n    const queue = new PriorityQueue();\n    queue.add([0, start]);\n    dists[start] = 0;\n    while (queue.size() > 0) {\n        const [dist, now] = queue.pop();\n        if (dists[now] < dist) {\n            continue;\n        }\n        for (let i = 0; i < gr[now].length; i++) {\n            const next = gr[now][i];\n            const cost = dist + 1;\n            if (cost < dists[next]) {\n                dists[next] = cost;\n                queue.add([cost, next]);\n            }\n        }\n    }\n    return dists;\n}\nconsole.time(\"futureCity\");\nconsole.log(futureCity(inputs, K, X));\nconsole.timeEnd(\"futureCity\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shortest_path.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/shortest_path.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;
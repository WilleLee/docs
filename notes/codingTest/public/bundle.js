/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/dfs_bfs.ts":
/*!************************!*\
  !*** ./src/dfs_bfs.ts ***!
  \************************/
/***/ (() => {

eval("\nconsole.log(\"DFS/BFS\");\nconst exGraph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7],\n];\nconst dfsExVisited = Array(exGraph.length).fill(false);\n// console.log(\"exGraph\", exGraph);\n// console.log(\"dfsExVisited\", dfsExVisited);\nfunction dfs(graph, v, visited) {\n    visited[v] = true; // 현재 노드 방문 처리\n    console.log(v, \"방문\");\n    for (let i = 0; i < graph[v].length; i++) {\n        if (!visited[graph[v][i]]) {\n            dfs(graph, graph[v][i], visited);\n        }\n    }\n}\n// dfs(exGraph, 1, dfsExVisited);\nconst bfsExVisited = Array(exGraph.length).fill(false);\nfunction bfs(graph, start, visited) {\n    const queue = [start];\n    visited[start] = true;\n    while (queue.length > 0) {\n        const v = queue.shift(); // 큐에서 하나의 원소를 뽑아 출력\n        console.log(v, \"방문\");\n        for (let i = 0; i < graph[v].length; i++) {\n            const elem = graph[v][i];\n            if (!visited[elem]) {\n                queue.push(elem);\n                visited[elem] = true;\n            }\n        }\n    }\n}\n// bfs(exGraph, 1, bfsExVisited);\n// 음료수 얼려 먹기\nconst iceGraph = [\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 1, 1],\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0],\n];\nfunction makeIcecreams(graph) {\n    function dfsIce(x, y) {\n        if (x <= -1 || x >= graph.length || y <= -1 || y >= graph[0].length) {\n            return false;\n        }\n        if (graph[x][y] === 0) {\n            graph[x][y] = 1;\n            dfsIce(x - 1, y);\n            dfsIce(x + 1, y);\n            dfsIce(x, y - 1);\n            dfsIce(x, y + 1);\n            return true;\n        }\n        return false;\n    }\n    let result = 0;\n    for (let i = 0; i < graph.length; i++) {\n        for (let j = 0; j < graph[i].length; j++) {\n            if (dfsIce(i, j)) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}\nconsole.log(makeIcecreams(iceGraph));\n// 미로 탈출\nconst mazeGraph = [\n    [1, 0, 1, 0, 1, 0],\n    [1, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n];\nconst mazeGraph2 = [\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n];\nfunction escapeMaze(graph) {\n    const queue = [[0, 0]];\n    while (queue.length > 0) {\n        const [x, y] = queue.shift();\n        const trials = [\n            [x - 1, y],\n            [x + 1, y],\n            [x, y - 1],\n            [x, y + 1],\n        ];\n        for (let i = 0; i < trials.length; i++) {\n            const [nx, ny] = trials[i];\n            if (nx < 0 || ny < 0 || nx >= graph.length || ny >= graph[0].length) {\n                continue;\n            }\n            if (graph[nx][ny] === 0) {\n                continue;\n            }\n            if (graph[nx][ny] === 1) {\n                graph[nx][ny] += graph[x][y];\n                queue.push([nx, ny]);\n            }\n        }\n    }\n    return graph[graph.length - 1][graph[0].length - 1];\n}\nconsole.log(escapeMaze(mazeGraph));\nconsole.log(escapeMaze(mazeGraph2));\n// 백준 1260 DFS와 BFS\nconst adjList = [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [2, 4],\n    [3, 4],\n];\nfunction dfsBfs(n, list, v) {\n    // n = 정점의 개수\n    // v = 시작 정점\n    const dfs = [];\n    const bfs = [];\n    // [ [], [3, 4], [4], [1, 4], [1, 2, 3]  ]\n    const newArray = Array(n + 1).fill([]);\n    console.log(newArray);\n    for (let i = 0; i < list.length; i++) {\n        const [a, b] = list[i];\n        newArray[a] = [...newArray[a], b];\n        newArray[b] = [...newArray[b], a];\n    }\n    console.log(newArray);\n    const dfsVisited = Array(n + 1).fill(false);\n    function _dfs(start) {\n        dfsVisited[start] = true;\n        dfs.push(start);\n        console.log(`dfs ${start} 방문`);\n        for (let i = 0; i < newArray[start].length; i++) {\n            if (!dfsVisited[newArray[start][i]]) {\n                _dfs(newArray[start][i]);\n            }\n        }\n    }\n    _dfs(v);\n    const bfsVisited = Array(n + 1).fill(false);\n    function _bfs(start) {\n        const queue = [start];\n        bfsVisited[start] = true;\n        while (queue.length > 0) {\n            const a = queue.shift();\n            bfs.push(a);\n            console.log(`bfs ${a} 방문`);\n            for (let i = 0; i < newArray[a].length; i++) {\n                if (!bfsVisited[newArray[a][i]]) {\n                    queue.push(newArray[a][i]);\n                    bfsVisited[newArray[a][i]] = true;\n                }\n            }\n        }\n    }\n    _bfs(v);\n    return `${dfs.join(\" \")}\\n${bfs.join(\" \")}`;\n}\nconsole.log(dfsBfs(4, adjList, 1));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/dfs_bfs.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/dfs_bfs.ts"]();
/******/ 	
/******/ })()
;
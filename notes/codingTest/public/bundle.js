/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/greedy.ts":
/*!***********************!*\
  !*** ./src/greedy.ts ***!
  \***********************/
/***/ (() => {

eval("\n// 거스름돈\nconst changes = [500, 100, 50, 10];\n// n은 항상 10의 배수\nfunction change(n) {\n    let count = 0;\n    for (let i = 0; i < changes.length; i++) {\n        count += Math.floor(n / changes[i]);\n        n %= changes[i];\n    }\n    return count;\n}\nconsole.log(\"change count for 1260\", change(1260)); // 6\n/*\n그리디 알고리즘으로 문제의 해법을 찾았을 때는 그 해법이 정당한지 검토해야 한다.\n거스름돈 문제를 그리디 알고리즘으로 해결할 수 있는 이유는 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로\n작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다.\n*/\n// 큰 수의 법칙\nconst bigNumList = [2, 4, 5, 4, 6];\nfunction bigNumLaw(list, m, k) {\n    console.time(\"bigNumLaw\");\n    const [first, second] = list.sort((a, b) => b - a);\n    let sum = 0;\n    let count = 0;\n    while (count < m) {\n        count++;\n        if (count % (k + 1) === 0) {\n            sum += second;\n        }\n        else {\n            sum += first;\n        }\n    }\n    console.timeEnd(\"bigNumLaw\");\n    return sum;\n}\nconsole.log(\"big num law\", bigNumLaw(bigNumList, 8, 3));\nfunction bigNumLaw2(list, m, k) {\n    console.time(\"bigNumLaw2\");\n    const [first, second] = list.sort((a, b) => b - a);\n    let sum = 0;\n    let firstCount = Math.floor(m / (k + 1)) + (m % (k + 1));\n    let secondCount = m - firstCount;\n    sum += first * firstCount;\n    sum += second * secondCount;\n    console.timeEnd(\"bigNumLaw2\");\n    return sum;\n}\nconsole.log(\"big num law2\", bigNumLaw2(bigNumList, 8, 3));\n// 숫자 카드 게임\nconst cardGameList = [\n    [3, 1, 2],\n    [4, 1, 4],\n    [2, 2, 2],\n];\nconst cardGameList2 = [\n    [7, 3, 1, 8],\n    [3, 3, 3, 4],\n];\nfunction cardGame(list) {\n    console.time(\"cardGame\");\n    const minList = list.map((arr) => Math.min(...arr));\n    console.timeEnd(\"cardGame\");\n    return Math.max(...minList);\n}\nconsole.log(\"card game\", cardGame(cardGameList));\nconsole.log(\"card game2\", cardGame(cardGameList2));\n// 1이 될 때까지\nfunction untilOne(n, k) {\n    console.time(\"untilOne\");\n    let count = 0;\n    while (n > 1) {\n        if (n % k === 0) {\n            n /= k;\n        }\n        else {\n            n -= 1;\n        }\n        count++;\n    }\n    console.timeEnd(\"untilOne\");\n    return count;\n}\nconsole.log(\"until one\", untilOne(25, 5));\n// 모험가 길드\nconst adventureList = [2, 3, 1, 2, 2];\nfunction adventureGuild(list) {\n    console.time(\"adventureGuild\");\n    list.sort((a, b) => a - b); // [1, 2, 2, 2, 3]\n    let count = 0;\n    let group = 0;\n    for (let i = 0; i < list.length; i++) {\n        count++;\n        if (count >= list[i]) {\n            group++;\n            count = 0;\n        }\n    }\n    console.timeEnd(\"adventureGuild\");\n    return group;\n}\nconsole.log(adventureGuild(adventureList));\n// 곱하기 혹은 더하기\nconst numStr = \"02984\";\nconst numStr2 = \"567\";\n// 0이나 1이 아니면 곱하면 되지 않나?\nfunction multiplyOrAdd(str) {\n    console.time(\"multiplyOrAdd\");\n    let result = Number(str[0]);\n    if (str.length === 1)\n        return result;\n    for (let i = 1; i < str.length; i++) {\n        const num = Number(str[i]);\n        if (result <= 1 || num <= 1) {\n            result += num;\n        }\n        else {\n            result *= num;\n        }\n    }\n    console.timeEnd(\"multiplyOrAdd\");\n    return result;\n}\nconsole.log(multiplyOrAdd(numStr));\nconsole.log(multiplyOrAdd(numStr2));\n// 문자열 뒤집기\nconst reverseStr = \"11001100110011000001\";\n// bad performance!!\nfunction reverseString(str) {\n    console.time(\"reverseString\");\n    const replaced = str.replace(/0+/g, \"0\").replace(/1+/g, \"1\");\n    const zeroCount = replaced.replace(/1/g, \"\").length;\n    const oneCount = replaced.length - zeroCount;\n    console.timeEnd(\"reverseString\");\n    return Math.min(zeroCount, oneCount);\n}\nconsole.log(reverseString(reverseStr));\nfunction reverseString2(str) {\n    console.time(\"reverseString2\");\n    if (str.length === 1)\n        return 0;\n    let current = str[0];\n    let zeroCount = 0;\n    let oneCount = 0;\n    if (current === \"0\")\n        zeroCount++;\n    else\n        oneCount++;\n    for (let i = 1; i < str.length; i++) {\n        if (current === str[i])\n            continue;\n        current = str[i];\n        if (current === \"0\")\n            zeroCount++;\n        else\n            oneCount++;\n    }\n    const min = Math.min(zeroCount, oneCount);\n    console.timeEnd(\"reverseString2\");\n    return min;\n}\nconsole.log(reverseString2(reverseStr));\n// 만들 수 없는 금액\nconst coins = [3, 2, 1, 1, 9];\nfunction impossibleAmount(list) {\n    console.time(\"impossibleAmount\");\n    let result = 1;\n    list.sort((a, b) => a - b);\n    for (let i = 0; i < list.length; i++) {\n        if (result < list[i])\n            break;\n        result += list[i];\n    }\n    console.timeEnd(\"impossibleAmount\");\n    return result;\n}\nconsole.log(impossibleAmount(coins));\n// 볼링공 고르기\n// n = 공의 개수, m = 공의 최대 무게\n// 서로 다른 무게의 공을 고를 거임\n// [1,3,2,3,2], 3\nconst balls = [1, 3, 2, 3, 2];\nconst maxWeight = 3;\nconst balls2 = [1, 5, 4, 3, 2, 4, 5, 2];\nconst maxWeight2 = 5;\nfunction selectBalls(list, m) {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        for (let j = i + 1; j < list.length; j++) {\n            if (list[i] !== list[j])\n                count++;\n        }\n    }\n    return count;\n}\nconsole.log(selectBalls(balls, maxWeight));\nconsole.log(selectBalls(balls2, maxWeight2));\n// 무지의 먹방 라이브\nfunction muzi(food_times, k) {\n    if (k < food_times.length) {\n        return k + 1;\n    }\n    const maxTime = food_times.reduce((prev, curr) => prev + curr, 0);\n    if (maxTime <= k)\n        return -1;\n    const map = new Map();\n    for (let i = 0; i < food_times.length; i++) {\n        map.set(i, food_times[i]);\n    }\n    while (true) {\n        k = k - map.size;\n        map.forEach((value, key) => {\n            if (value <= 1) {\n                map.delete(key);\n            }\n            else {\n                map.set(key, value - 1);\n            }\n        });\n        if (map.size === k) {\n            k = 0;\n            map.forEach((value, key) => {\n                if (value <= 1) {\n                    map.delete(key);\n                }\n                else {\n                    map.set(key, value - 1);\n                }\n            });\n            break;\n        }\n        if (map.size > k) {\n            break;\n        }\n    }\n    // console.log(\"k\", k, \"map\", map);\n    // if(map.size >= k) return -1;\n    const mapKeys = [];\n    map.forEach((value, key) => {\n        mapKeys.push(key + 1);\n    });\n    return mapKeys[k];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/greedy.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/greedy.ts"]();
/******/ 	
/******/ })()
;
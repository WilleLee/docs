/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/playground.ts":
/*!***************************!*\
  !*** ./src/playground.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// shortest path\n/*\nconst graph = [\n  [],\n  [\n    [2, 2],\n    [3, 5],\n    [4, 1],\n  ], // 1번 노드에서 2로 가는 비용 = 2, 3으로 가는 비용 = 5 ...\n  [\n    [3, 3],\n    [4, 2],\n  ],\n  [\n    [2, 3],\n    [6, 5],\n  ],\n  [\n    [3, 3],\n    [5, 1],\n  ],\n  [\n    [3, 1],\n    [6, 2],\n  ],\n  [],\n];\n\n// dijkstra\nconst V = graph.length - 1; // 노드의 개수\nconst INF = Infinity;\n\nclass Heap {\n  heap: [number, number][]; // [distance, node]\n  constructor() {\n    this.heap = [];\n  }\n  size() {\n    return this.heap.length;\n  }\n  swap(index1: number, index2: number) {\n    [this.heap[index1], this.heap[index2]] = [\n      this.heap[index2],\n      this.heap[index1],\n    ];\n  }\n\n  add([distance, node]: [number, number]) {\n    this.heap.push([distance, node]);\n    this.bubbleUp();\n  }\n  bubbleUp() {\n    let index = this.size() - 1;\n    let parentIndex = Math.floor((index - 1) / 2);\n    while (\n      this.heap[parentIndex] &&\n      this.heap[parentIndex] > this.heap[index]\n    ) {\n      this.swap(parentIndex, index);\n      index = parentIndex;\n      parentIndex = Math.floor((index - 1) / 2);\n    }\n  }\n\n  pop() {\n    if (this.size() === 0) {\n      return;\n    }\n    if (this.size() === 1) {\n      return this.heap.pop();\n    }\n    const value = this.heap[0];\n    this.heap[0] = this.heap.pop() as [number, number];\n    this.bubbleDown();\n    return value;\n  }\n  bubbleDown() {\n    let index = 0;\n    let leftIndex = 1;\n    let rightIndex = 2;\n\n    while (\n      (this.heap[leftIndex] && this.heap[leftIndex] < this.heap[index]) ||\n      (this.heap[rightIndex] && this.heap[rightIndex] < this.heap[index])\n    ) {\n      let smallerIndex = leftIndex;\n      if (\n        this.heap[rightIndex] &&\n        this.heap[rightIndex] < this.heap[leftIndex]\n      ) {\n        smallerIndex = rightIndex;\n      }\n\n      this.swap(index, smallerIndex);\n      index = smallerIndex;\n      leftIndex = index * 2 + 1;\n      rightIndex = index * 2 + 2;\n    }\n  }\n}\n\nfunction dijkstra(start: number) {\n  const heap = new Heap();\n  const distance = Array(V + 1).fill(INF);\n\n  heap.add([0, start]);\n  distance[start] = 0;\n\n  while (heap.size() > 0) {\n    const [dist, now] = heap.pop() as [number, number];\n\n    if (distance[now] < dist) {\n      continue;\n    }\n\n    for (let i = 0; i < graph[now].length; i++) {\n      const [n, d] = graph[now][i];\n      const cost = dist + d;\n      if (cost < distance[now]) {\n        distance[now] = cost;\n        heap.add([cost, n]);\n      }\n    }\n  }\n\n  return distance;\n}\n\nconsole.time(\"dijkstra\");\nconsole.log(dijkstra(1));\nconsole.timeEnd(\"dijkstra\");\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//\n/*\nconst URL = \"blh\";\nconst createConnection = (url: string) => ({\n  url,\n});\n\nclass DB {\n  public instance: any;\n  static instance: any;\n  constructor(url: string) {\n    if (!DB.instance) {\n      DB.instance = createConnection(url);\n    }\n    return DB.instance;\n  }\n  connect() {\n    return this.instance;\n  }\n}\n\nconst a = new DB(URL);\nconst b = new DB(URL);\n\nconsole.log(a === b);\n\nclass Vehicle {\n  private make: string;\n  private model: string;\n  constructor(make: string, model: string) {\n    this.make = make;\n    this.model = model;\n  }\n  display() {\n    console.log(`${this.make} ${this.model}`);\n  }\n}\n\nclass Car extends Vehicle {\n  constructor(make: string, model: string) {\n    super(make, model);\n  }\n}\nclass Truck extends Vehicle {\n  constructor(make: string, model: string) {\n    super(make, model);\n  }\n}\n\nfunction vehicleFactory(type: string, make: string, model: string) {\n  switch (type) {\n    case \"car\":\n      return new Car(make, model);\n    case \"truck\":\n      return new Truck(make, model);\n    default:\n      throw new Error(\"Invalid vehicle type\");\n  }\n}\n\nconst car1 = vehicleFactory(\"car\", \"Toyota\", \"Corolla\");\nconst truck1 = vehicleFactory(\"truck\", \"Ford\", \"F150\");\n\ncar1.display();\ntruck1.display();\n*/\n// revealing module pattern\nconst counterModule = (function () {\n    let count = 0;\n    function increment() {\n        count++;\n    }\n    function decrement() {\n        count--;\n    }\n    function getCount() {\n        return count;\n    }\n    return {\n        increment,\n        decrement,\n        getCount,\n    };\n})();\nconsole.log(counterModule.getCount()); // 0\ncounterModule.increment();\ncounterModule.increment();\nconsole.log(counterModule.getCount()); // 2\ncounterModule.decrement();\nconsole.log(counterModule.getCount()); // 1\n// floyd warshall\nconst INF = Infinity;\nconst N = 4; // 노드의 개수\nconst inputs = [\n    [1, 2, 4],\n    [1, 4, 6],\n    [2, 1, 3],\n    [2, 3, 7],\n    [3, 1, 5],\n    [3, 4, 4],\n    [4, 3, 2],\n];\nconst distance = Array(N + 1)\n    .fill([])\n    .map(() => Array(N + 1).fill(INF));\nfor (let i = 1; i <= N; i++) {\n    for (let j = 1; j <= N; j++) {\n        if (i === j) {\n            distance[i][j] = 0;\n        }\n    }\n}\nfor (let i = 0; i < inputs.length; i++) {\n    const [a, b, d] = inputs[i];\n    distance[a][b] = d;\n}\nfor (let k = 1; k <= N; k++) {\n    for (let a = 1; a <= N; a++) {\n        for (let b = 1; b <= N; b++) {\n            const min = Math.min(distance[a][b], distance[a][k] + distance[k][b]);\n            console.log(min);\n            distance[a][b] = min;\n        }\n    }\n}\nconsole.log(\"distance\", distance);\nconst city = 5;\nconst buses = [\n    [1, 2, 2],\n    [1, 3, 3],\n    [1, 4, 1],\n    [1, 5, 10],\n    [2, 4, 2],\n    [3, 4, 1],\n    [3, 5, 1],\n    [4, 5, 3],\n    [3, 5, 10],\n    [3, 1, 8],\n    [1, 4, 2],\n    [5, 1, 7],\n    [3, 4, 2],\n    [5, 2, 4],\n];\nconst costs = Array(city + 1)\n    .fill([])\n    .map(() => Array(city + 1).fill(INF));\nfor (let a = 1; a <= city; a++) {\n    for (let b = 1; b <= city; b++) {\n        if (a === b) {\n            costs[a][b] = 0;\n        }\n    }\n}\nfor (let i = 0; i < buses.length; i++) {\n    const [a, b, cost] = buses[i];\n    const currentCost = costs[a][b];\n    costs[a][b] = Math.min(cost, currentCost);\n}\nfor (let k = 1; k <= city; k++) {\n    for (let a = 1; a <= city; a++) {\n        for (let b = 1; b <= city; b++) {\n            const min = Math.min(costs[a][b], costs[a][k] + costs[k][b]);\n            costs[a][b] = min;\n        }\n    }\n}\nfor (let i = 1; i <= city; i++) {\n    let answer = \"\";\n    for (let j = 1; j <= city; j++) {\n        if (costs[i][j] === INF) {\n            answer += \"0\";\n        }\n        else {\n            answer += String(costs[i][j]);\n        }\n        if (j !== city) {\n            answer += \" \";\n        }\n    }\n    console.log(answer);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/playground.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/playground.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;
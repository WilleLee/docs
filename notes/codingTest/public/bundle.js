/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/graph.ts":
/*!**********************!*\
  !*** ./src/graph.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst V = 6; // 노드의 개수\nconst unions = [\n    [1, 4],\n    [2, 3],\n    [2, 4],\n    [5, 6],\n];\nconst parentTable = Array.from({ length: V + 1 })\n    .fill(0)\n    .map((_, index) => index);\nfunction findRoot(parent, node) {\n    if (parent[node] !== node) {\n        return findRoot(parent, parent[node]);\n    }\n    return node;\n}\nfunction union(parent, a, b) {\n    const rootA = findRoot(parent, a);\n    const rootB = findRoot(parent, b);\n    if (rootA < rootB) {\n        parent[rootB] = rootA;\n    }\n    else {\n        parent[rootA] = rootB;\n    }\n}\nconst compressedParentTable = Array.from({ length: V + 1 })\n    .fill(0)\n    .map((_, index) => index);\nfunction compressedFindRoot(parent, node) {\n    if (parent[node] !== node) {\n        parent[node] = compressedFindRoot(parent, parent[node]);\n    }\n    return parent[node];\n}\nfunction compressedUnion(parent, a, b) {\n    const rootA = compressedFindRoot(parent, a);\n    const rootB = compressedFindRoot(parent, b);\n    if (rootA < rootB) {\n        parent[rootB] = rootA;\n    }\n    else {\n        parent[rootA] = rootB;\n    }\n}\nconsole.time(\"union\");\nfor (let i = 0; i < unions.length; i++) {\n    const [a, b] = unions[i];\n    union(parentTable, a, b);\n}\nconsole.log(\"parentTable\", parentTable);\nconst roots = Array.from({ length: V + 1 }).map(() => 0);\nfor (let i = 1; i <= V; i++) {\n    roots[i] = findRoot(parentTable, i);\n}\nconsole.log(\"roots\", roots.slice(1));\nconsole.timeEnd(\"union\");\nconsole.time(\"compressedUnion\");\nfor (let i = 0; i < unions.length; i++) {\n    const [a, b] = unions[i];\n    compressedUnion(compressedParentTable, a, b);\n}\nconst cRoots = [];\nfor (let i = 1; i <= V; i++) {\n    cRoots.push(compressedFindRoot(compressedParentTable, i));\n}\nconsole.log(\"cRoots\", cRoots);\nconsole.timeEnd(\"compressedUnion\");\nconst cycleV = 3; // 노드의 개수\nconst cycleEdges = [\n    [1, 2],\n    [1, 3],\n    [2, 3],\n];\nconst cycleParentTable = Array.from({\n    length: cycleV + 1,\n})\n    .fill(0)\n    .map((_, index) => index);\nfunction findCycleRoot(parent, x) {\n    if (parent[x] !== x) {\n        parent[x] = findCycleRoot(parent, parent[x]);\n    }\n    return parent[x];\n}\nfunction cycleUnion(parent, a, b) {\n    const rootA = findCycleRoot(parent, a);\n    const rootB = findCycleRoot(parent, b);\n    if (rootA < rootB) {\n        parent[rootB] = rootA;\n    }\n    else {\n        parent[rootA] = rootB;\n    }\n}\nlet isCycle = false;\nfor (let i = 0; i < cycleEdges.length; i++) {\n    const [a, b] = cycleEdges[i];\n    if (findCycleRoot(cycleParentTable, a) === findCycleRoot(cycleParentTable, b)) {\n        isCycle = true;\n        break;\n    }\n    else {\n        cycleUnion(cycleParentTable, a, b);\n    }\n}\nconsole.log(\"cycleParentTable\", cycleParentTable);\nif (isCycle) {\n    console.log(\"사이클이 발생했습니다.\");\n}\nelse {\n    console.log(\"사이클이 발생하지 않았습니다.\");\n}\n// kruskal's algorithm\nconst N = 7; // 노드의 개수\nconst kruskalEdges = [\n    [1, 2, 29],\n    [1, 5, 75],\n    [2, 3, 35],\n    [2, 6, 34],\n    [3, 4, 7],\n    [4, 6, 23],\n    [4, 7, 13],\n    [5, 6, 53],\n    [6, 7, 25],\n];\nkruskalEdges.sort((a, b) => a[2] - b[2]);\nconst kruskalParent = Array.from({ length: N + 1 })\n    .fill(0)\n    .map((_, index) => index);\nfunction kruskalFindRoot(parent, x) {\n    if (parent[x] !== x) {\n        parent[x] = kruskalFindRoot(parent, parent[x]);\n    }\n    return parent[x];\n}\nfunction kruskalUnion(parent, a, b) {\n    const rootA = kruskalFindRoot(parent, a);\n    const rootB = kruskalFindRoot(parent, b);\n    if (rootA < rootB) {\n        parent[rootB] = rootA;\n    }\n    else {\n        parent[rootA] = rootB;\n    }\n}\nconsole.time(\"kruskal\");\nlet kruskalTotalCost = 0;\nfor (let i = 0; i < kruskalEdges.length; i++) {\n    const [a, b, cost] = kruskalEdges[i];\n    if (kruskalFindRoot(kruskalParent, a) !== kruskalFindRoot(kruskalParent, b)) {\n        kruskalTotalCost += cost;\n        kruskalUnion(kruskalParent, a, b);\n    }\n}\nconsole.log(\"kruskalParent\", kruskalParent);\nconsole.log(\"kruskalTotalCost\", kruskalTotalCost);\nconsole.timeEnd(\"kruskal\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/graph.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/graph.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;
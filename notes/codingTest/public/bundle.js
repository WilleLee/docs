/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/shortest_path.ts":
/*!******************************!*\
  !*** ./src/shortest_path.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst INF = Infinity;\nconst graph = [\n    [],\n    [\n        [2, 2],\n        [3, 5],\n        [4, 1],\n    ], // 1번 노드에서 2로 가는 비용 = 2, 3으로 가는 비용 = 5 ...\n    [\n        [3, 3],\n        [4, 2],\n    ],\n    [\n        [2, 3],\n        [6, 5],\n    ],\n    [\n        [3, 3],\n        [5, 1],\n    ],\n    [\n        [3, 1],\n        [6, 2],\n    ],\n    [],\n];\n// console.log(\"hello\");\nconst V = graph.length - 1; // 노드 개수\nconst S = 1; // 시작 노드\nconst visited1 = Array(V + 1).fill(false);\nconst distance1 = Array(V + 1).fill(INF);\nfunction getSmallestNode() {\n    let min = INF;\n    let index = 0;\n    for (let i = 1; i <= V; i++) {\n        if (distance1[i] < min && !visited1[i]) {\n            min = distance1[i];\n            index = i;\n        }\n    }\n    return index;\n}\nfunction simpleDijkstra(start) {\n    // 시작 노드에 대하여 초기화\n    visited1[start] = true;\n    distance1[start] = 0;\n    for (let i = 0; i < graph[start].length; i++) {\n        const [node, cost] = graph[start][i];\n        distance1[node] = cost;\n    }\n    // 시작 노드를 제외한 전체 n - 1개의 노드에 대해 반복\n    for (let i = 0; i < V - 1; i++) {\n        const now = getSmallestNode();\n        visited1[now] = true;\n        for (let j = 0; j < graph[now].length; j++) {\n            const [n, c] = graph[now][j];\n            const cost = distance1[now] + c;\n            if (cost < distance1[n]) {\n                distance1[n] = cost;\n            }\n        }\n    }\n}\nconsole.time(\"simpleDijkstra\");\nsimpleDijkstra(S);\nconsole.timeEnd(\"simpleDijkstra\");\nfor (let i = 1; i <= V; i++) {\n    if (distance1[i] === INF) {\n        console.log(\"도달할 수 없습니다.\");\n    }\n    else {\n        console.log(i, distance1[i]);\n    }\n}\n// 0.116ms\n/*\nclass PriorityQueue {\n  queue: [number, number][];\n  constructor() {\n    this.queue = [];\n  }\n  add([distance, node]: [number, number]) {\n    this.queue.push([distance, node]);\n    this.queue.sort((a, b) => a[0] - b[0]);\n  }\n  pop() {\n    return this.queue.shift();\n  }\n  size() {\n    return this.queue.length;\n  }\n}\n*/\n// 0.210ms\nclass PriorityQueue {\n    queue; // [distance, node]\n    constructor() {\n        this.queue = [];\n    }\n    size() {\n        return this.queue.length;\n    }\n    swap(index1, index2) {\n        [this.queue[index1], this.queue[index2]] = [\n            this.queue[index2],\n            this.queue[index1],\n        ];\n    }\n    add([distance, node]) {\n        this.queue.push([distance, node]);\n        this.heapifyUp();\n    }\n    heapifyUp() {\n        let index = this.queue.length - 1; // 새로운 노드의 위치\n        let parentIndex = Math.floor((index - 1) / 2); // 새로운 노드의 부모 노드의 위치\n        while (this.queue[parentIndex] &&\n            this.queue[parentIndex][0] > this.queue[index][0]) {\n            this.swap(index, parentIndex);\n            index = parentIndex;\n            parentIndex = Math.floor((index - 1) / 2);\n        }\n    }\n    pop() {\n        if (this.queue.length === 0) {\n            return;\n        }\n        if (this.queue.length === 1) {\n            return this.queue.shift();\n        }\n        const value = this.queue[0];\n        this.queue[0] = this.queue.pop();\n        this.heapifyDown();\n        return value;\n    }\n    heapifyDown() {\n        let index = 0;\n        let leftIndex = index * 2 + 1;\n        let rightIndex = index * 2 + 2;\n        while ((this.queue[leftIndex] &&\n            this.queue[leftIndex][0] < this.queue[index][0]) ||\n            (this.queue[rightIndex] &&\n                this.queue[rightIndex][0] < this.queue[index][0])) {\n            let smallerIndex = leftIndex;\n            if (this.queue[rightIndex] &&\n                this.queue[rightIndex][0] < this.queue[leftIndex][0]) {\n                smallerIndex = rightIndex;\n            }\n            this.swap(index, smallerIndex);\n            index = smallerIndex;\n            leftIndex = index * 2 + 1;\n            rightIndex = index * 2 + 2;\n        }\n    }\n}\nconst distance2 = Array(V + 1).fill(INF);\nfunction advancedDijkstra(start) {\n    const queue = new PriorityQueue();\n    queue.add([0, start]);\n    distance2[start] = 0;\n    while (queue.size() > 0) {\n        // 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기\n        const [dist, now] = queue.pop();\n        // 이미 처리된 노드 무시\n        if (distance2[now] < dist) {\n            continue;\n        }\n        // 현재 노드와 연결된 다른 인접한 노드들을 확인\n        for (let i = 0; i < graph[now].length; i++) {\n            const [n, d] = graph[now][i];\n            const cost = dist + d;\n            if (cost < distance2[n]) {\n                distance2[n] = cost;\n                queue.add([cost, n]);\n            }\n        }\n    }\n}\nconsole.time(\"advancedDijkstra\");\nadvancedDijkstra(S);\nconsole.timeEnd(\"advancedDijkstra\");\nfor (let i = 1; i <= V; i++) {\n    if (distance2[i] === INF) {\n        console.log(\"도달할 수 없습니다.\");\n    }\n    else {\n        console.log(i, distance2[i]);\n    }\n}\n// floyd-warshall\n// const fwNodes = 4;\nconst fwInputs = [\n    [1, 2, 4],\n    [1, 4, 6],\n    [2, 1, 3],\n    [2, 3, 7],\n    [3, 1, 5],\n    [3, 4, 4],\n    [4, 3, 2],\n];\nfunction fw(nodes, inputs) {\n    const fwGraph = Array(nodes + 1)\n        .fill([])\n        .map(() => Array(nodes + 1).fill(INF));\n    for (let a = 1; a <= nodes; a++) {\n        for (let b = 1; b <= nodes; b++) {\n            if (a === b) {\n                fwGraph[a][b] = 0;\n            }\n        }\n    }\n    for (let i = 0; i < inputs.length; i++) {\n        const [a, b, c] = inputs[i];\n        fwGraph[a][b] = c;\n    }\n    for (let k = 1; k <= nodes; k++) {\n        for (let a = 1; a <= nodes; a++) {\n            for (let b = 1; b <= nodes; b++) {\n                fwGraph[a][b] = Math.min(fwGraph[a][b], fwGraph[a][k] + fwGraph[k][b]);\n            }\n        }\n    }\n    return fwGraph;\n}\nconsole.time(\"fw\");\nconsole.log(\"fw result\", fw(4, fwInputs));\nconsole.timeEnd(\"fw\");\n// 미래 도시\n// 1번 -> K번 최단 거리\n// K번 -> X번 최단 거리\nconst inputs = [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [2, 4],\n    [3, 4],\n    [3, 5],\n    [4, 5],\n    [4, 6],\n];\nconst N = 6;\nconst X = 4;\nconst K = 5;\nfunction futureCity(inp, middle, end) {\n    const cityGraph = Array(101).fill([]);\n    for (let i = 0; i < inp.length; i++) {\n        const [a, b] = inp[i];\n        cityGraph[a] = [...cityGraph[a], b];\n        cityGraph[b] = [...cityGraph[b], a];\n    }\n    const fromStart = dij(1, cityGraph);\n    const fromMiddle = dij(middle, cityGraph);\n    return fromStart[middle] + fromMiddle[end];\n}\nfunction dij(start, gr) {\n    const dists = Array(101).fill(INF);\n    const queue = new PriorityQueue();\n    queue.add([0, start]);\n    dists[start] = 0;\n    while (queue.size() > 0) {\n        const [dist, now] = queue.pop();\n        if (dists[now] < dist) {\n            continue;\n        }\n        for (let i = 0; i < gr[now].length; i++) {\n            const next = gr[now][i];\n            const cost = dist + 1;\n            if (cost < dists[next]) {\n                dists[next] = cost;\n                queue.add([cost, next]);\n            }\n        }\n    }\n    return dists;\n}\nfunction futureCityFw(inp, nodes, middle, end) {\n    const fwGraph = Array(nodes + 1)\n        .fill([])\n        .map(() => Array(nodes + 1).fill(INF));\n    for (let a = 1; a <= nodes; a++) {\n        for (let b = 1; b <= nodes; b++) {\n            if (a === b) {\n                fwGraph[a][b] = 0;\n            }\n        }\n    }\n    for (let i = 0; i < inp.length; i++) {\n        const [a, b] = inp[i];\n        fwGraph[a][b] = 1;\n        fwGraph[b][a] = 1;\n    }\n    for (let k = 1; k <= nodes; k++) {\n        for (let a = 1; a <= nodes; a++) {\n            for (let b = 1; b <= nodes; b++) {\n                fwGraph[a][b] = Math.min(fwGraph[a][b], fwGraph[a][k] + fwGraph[k][b]);\n            }\n        }\n    }\n    return fwGraph[1][middle] + fwGraph[middle][end];\n}\nconsole.time(\"futureCity\");\nconsole.log(futureCity(inputs, K, X));\nconsole.timeEnd(\"futureCity\");\nconsole.time(\"futureCityFw\");\nconsole.log(futureCityFw(inputs, N, K, X));\nconsole.timeEnd(\"futureCityFw\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRTlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29kaW5nX3Rlc3QvLi9zcmMvc2hvcnRlc3RfcGF0aC50cz9kOGE3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IElORiA9IEluZmluaXR5O1xuXG5jb25zdCBncmFwaCA9IFtcbiAgW10sXG4gIFtcbiAgICBbMiwgMl0sXG4gICAgWzMsIDVdLFxuICAgIFs0LCAxXSxcbiAgXSwgLy8gMeuyiCDrhbjrk5zsl5DshJwgMuuhnCDqsIDripQg67mE7JqpID0gMiwgM+ycvOuhnCDqsIDripQg67mE7JqpID0gNSAuLi5cbiAgW1xuICAgIFszLCAzXSxcbiAgICBbNCwgMl0sXG4gIF0sXG4gIFtcbiAgICBbMiwgM10sXG4gICAgWzYsIDVdLFxuICBdLFxuICBbXG4gICAgWzMsIDNdLFxuICAgIFs1LCAxXSxcbiAgXSxcbiAgW1xuICAgIFszLCAxXSxcbiAgICBbNiwgMl0sXG4gIF0sXG4gIFtdLFxuXTtcblxuLy8gY29uc29sZS5sb2coXCJoZWxsb1wiKTtcblxuY29uc3QgViA9IGdyYXBoLmxlbmd0aCAtIDE7IC8vIOuFuOuTnCDqsJzsiJhcbmNvbnN0IFMgPSAxOyAvLyDsi5zsnpEg64W465OcXG5cbmNvbnN0IHZpc2l0ZWQxID0gQXJyYXkoViArIDEpLmZpbGwoZmFsc2UpO1xuY29uc3QgZGlzdGFuY2UxID0gQXJyYXkoViArIDEpLmZpbGwoSU5GKTtcblxuZnVuY3Rpb24gZ2V0U21hbGxlc3ROb2RlKCkge1xuICBsZXQgbWluID0gSU5GO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IFY7IGkrKykge1xuICAgIGlmIChkaXN0YW5jZTFbaV0gPCBtaW4gJiYgIXZpc2l0ZWQxW2ldKSB7XG4gICAgICBtaW4gPSBkaXN0YW5jZTFbaV07XG4gICAgICBpbmRleCA9IGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzaW1wbGVEaWprc3RyYShzdGFydDogbnVtYmVyKSB7XG4gIC8vIOyLnOyekSDrhbjrk5zsl5Ag64yA7ZWY7JesIOy0iOq4sO2ZlFxuICB2aXNpdGVkMVtzdGFydF0gPSB0cnVlO1xuICBkaXN0YW5jZTFbc3RhcnRdID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmFwaFtzdGFydF0ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbbm9kZSwgY29zdF0gPSBncmFwaFtzdGFydF1baV07XG4gICAgZGlzdGFuY2UxW25vZGVdID0gY29zdDtcbiAgfVxuXG4gIC8vIOyLnOyekSDrhbjrk5zrpbwg7KCc7Jm47ZWcIOyghOyytCBuIC0gMeqwnOydmCDrhbjrk5zsl5Ag64yA7ZW0IOuwmOuztVxuICBmb3IgKGxldCBpID0gMDsgaSA8IFYgLSAxOyBpKyspIHtcbiAgICBjb25zdCBub3cgPSBnZXRTbWFsbGVzdE5vZGUoKTtcbiAgICB2aXNpdGVkMVtub3ddID0gdHJ1ZTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JhcGhbbm93XS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgW24sIGNdID0gZ3JhcGhbbm93XVtqXTtcbiAgICAgIGNvbnN0IGNvc3QgPSBkaXN0YW5jZTFbbm93XSArIGM7XG4gICAgICBpZiAoY29zdCA8IGRpc3RhbmNlMVtuXSkge1xuICAgICAgICBkaXN0YW5jZTFbbl0gPSBjb3N0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zb2xlLnRpbWUoXCJzaW1wbGVEaWprc3RyYVwiKTtcblxuc2ltcGxlRGlqa3N0cmEoUyk7XG5cbmNvbnNvbGUudGltZUVuZChcInNpbXBsZURpamtzdHJhXCIpO1xuXG5mb3IgKGxldCBpID0gMTsgaSA8PSBWOyBpKyspIHtcbiAgaWYgKGRpc3RhbmNlMVtpXSA9PT0gSU5GKSB7XG4gICAgY29uc29sZS5sb2coXCLrj4Tri6ztlaAg7IiYIOyXhuyKteuLiOuLpC5cIik7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coaSwgZGlzdGFuY2UxW2ldKTtcbiAgfVxufVxuXG4vLyAwLjExNm1zXG4vKlxuY2xhc3MgUHJpb3JpdHlRdWV1ZSB7XG4gIHF1ZXVlOiBbbnVtYmVyLCBudW1iZXJdW107XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfVxuICBhZGQoW2Rpc3RhbmNlLCBub2RlXTogW251bWJlciwgbnVtYmVyXSkge1xuICAgIHRoaXMucXVldWUucHVzaChbZGlzdGFuY2UsIG5vZGVdKTtcbiAgICB0aGlzLnF1ZXVlLnNvcnQoKGEsIGIpID0+IGFbMF0gLSBiWzBdKTtcbiAgfVxuICBwb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVldWUuc2hpZnQoKTtcbiAgfVxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aDtcbiAgfVxufVxuKi9cblxuLy8gMC4yMTBtc1xuY2xhc3MgUHJpb3JpdHlRdWV1ZSB7XG4gIHF1ZXVlOiBbbnVtYmVyLCBudW1iZXJdW107IC8vIFtkaXN0YW5jZSwgbm9kZV1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aDtcbiAgfVxuXG4gIHN3YXAoaW5kZXgxOiBudW1iZXIsIGluZGV4MjogbnVtYmVyKSB7XG4gICAgW3RoaXMucXVldWVbaW5kZXgxXSwgdGhpcy5xdWV1ZVtpbmRleDJdXSA9IFtcbiAgICAgIHRoaXMucXVldWVbaW5kZXgyXSxcbiAgICAgIHRoaXMucXVldWVbaW5kZXgxXSxcbiAgICBdO1xuICB9XG5cbiAgYWRkKFtkaXN0YW5jZSwgbm9kZV06IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgICB0aGlzLnF1ZXVlLnB1c2goW2Rpc3RhbmNlLCBub2RlXSk7XG4gICAgdGhpcy5oZWFwaWZ5VXAoKTtcbiAgfVxuXG4gIGhlYXBpZnlVcCgpIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLnF1ZXVlLmxlbmd0aCAtIDE7IC8vIOyDiOuhnOyatCDrhbjrk5zsnZgg7JyE7LmYXG4gICAgbGV0IHBhcmVudEluZGV4ID0gTWF0aC5mbG9vcigoaW5kZXggLSAxKSAvIDIpOyAvLyDsg4jroZzsmrQg64W465Oc7J2YIOu2gOuqqCDrhbjrk5zsnZgg7JyE7LmYXG5cbiAgICB3aGlsZSAoXG4gICAgICB0aGlzLnF1ZXVlW3BhcmVudEluZGV4XSAmJlxuICAgICAgdGhpcy5xdWV1ZVtwYXJlbnRJbmRleF1bMF0gPiB0aGlzLnF1ZXVlW2luZGV4XVswXVxuICAgICkge1xuICAgICAgdGhpcy5zd2FwKGluZGV4LCBwYXJlbnRJbmRleCk7XG4gICAgICBpbmRleCA9IHBhcmVudEluZGV4O1xuICAgICAgcGFyZW50SW5kZXggPSBNYXRoLmZsb29yKChpbmRleCAtIDEpIC8gMik7XG4gICAgfVxuICB9XG5cbiAgcG9wKCkge1xuICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVldWUuc2hpZnQoKTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucXVldWVbMF07XG4gICAgdGhpcy5xdWV1ZVswXSA9IHRoaXMucXVldWUucG9wKCkgYXMgW251bWJlciwgbnVtYmVyXTtcbiAgICB0aGlzLmhlYXBpZnlEb3duKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaGVhcGlmeURvd24oKSB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgbGVmdEluZGV4ID0gaW5kZXggKiAyICsgMTtcbiAgICBsZXQgcmlnaHRJbmRleCA9IGluZGV4ICogMiArIDI7XG5cbiAgICB3aGlsZSAoXG4gICAgICAodGhpcy5xdWV1ZVtsZWZ0SW5kZXhdICYmXG4gICAgICAgIHRoaXMucXVldWVbbGVmdEluZGV4XVswXSA8IHRoaXMucXVldWVbaW5kZXhdWzBdKSB8fFxuICAgICAgKHRoaXMucXVldWVbcmlnaHRJbmRleF0gJiZcbiAgICAgICAgdGhpcy5xdWV1ZVtyaWdodEluZGV4XVswXSA8IHRoaXMucXVldWVbaW5kZXhdWzBdKVxuICAgICkge1xuICAgICAgbGV0IHNtYWxsZXJJbmRleCA9IGxlZnRJbmRleDtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5xdWV1ZVtyaWdodEluZGV4XSAmJlxuICAgICAgICB0aGlzLnF1ZXVlW3JpZ2h0SW5kZXhdWzBdIDwgdGhpcy5xdWV1ZVtsZWZ0SW5kZXhdWzBdXG4gICAgICApIHtcbiAgICAgICAgc21hbGxlckluZGV4ID0gcmlnaHRJbmRleDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zd2FwKGluZGV4LCBzbWFsbGVySW5kZXgpO1xuICAgICAgaW5kZXggPSBzbWFsbGVySW5kZXg7XG4gICAgICBsZWZ0SW5kZXggPSBpbmRleCAqIDIgKyAxO1xuICAgICAgcmlnaHRJbmRleCA9IGluZGV4ICogMiArIDI7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGRpc3RhbmNlMiA9IEFycmF5KFYgKyAxKS5maWxsKElORik7XG5cbmZ1bmN0aW9uIGFkdmFuY2VkRGlqa3N0cmEoc3RhcnQ6IG51bWJlcikge1xuICBjb25zdCBxdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG5cbiAgcXVldWUuYWRkKFswLCBzdGFydF0pO1xuICBkaXN0YW5jZTJbc3RhcnRdID0gMDtcblxuICB3aGlsZSAocXVldWUuc2l6ZSgpID4gMCkge1xuICAgIC8vIOqwgOyepSDstZzri6gg6rGw66as6rCAIOynp+ydgCDrhbjrk5zsl5Ag64yA7ZWcIOygleuztCDqurzrgrTquLBcbiAgICBjb25zdCBbZGlzdCwgbm93XSA9IHF1ZXVlLnBvcCgpIGFzIFtudW1iZXIsIG51bWJlcl07XG5cbiAgICAvLyDsnbTrr7gg7LKY66as65CcIOuFuOuTnCDrrLTsi5xcbiAgICBpZiAoZGlzdGFuY2UyW25vd10gPCBkaXN0KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyDtmITsnqwg64W465Oc7JmAIOyXsOqysOuQnCDri6Trpbgg7J247KCR7ZWcIOuFuOuTnOuTpOydhCDtmZXsnbhcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYXBoW25vd10ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IFtuLCBkXSA9IGdyYXBoW25vd11baV07XG4gICAgICBjb25zdCBjb3N0ID0gZGlzdCArIGQ7XG4gICAgICBpZiAoY29zdCA8IGRpc3RhbmNlMltuXSkge1xuICAgICAgICBkaXN0YW5jZTJbbl0gPSBjb3N0O1xuICAgICAgICBxdWV1ZS5hZGQoW2Nvc3QsIG5dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc29sZS50aW1lKFwiYWR2YW5jZWREaWprc3RyYVwiKTtcbmFkdmFuY2VkRGlqa3N0cmEoUyk7XG5jb25zb2xlLnRpbWVFbmQoXCJhZHZhbmNlZERpamtzdHJhXCIpO1xuXG5mb3IgKGxldCBpID0gMTsgaSA8PSBWOyBpKyspIHtcbiAgaWYgKGRpc3RhbmNlMltpXSA9PT0gSU5GKSB7XG4gICAgY29uc29sZS5sb2coXCLrj4Tri6ztlaAg7IiYIOyXhuyKteuLiOuLpC5cIik7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coaSwgZGlzdGFuY2UyW2ldKTtcbiAgfVxufVxuXG4vLyBmbG95ZC13YXJzaGFsbFxuLy8gY29uc3QgZndOb2RlcyA9IDQ7XG5jb25zdCBmd0lucHV0czogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10gPSBbXG4gIFsxLCAyLCA0XSxcbiAgWzEsIDQsIDZdLFxuICBbMiwgMSwgM10sXG4gIFsyLCAzLCA3XSxcbiAgWzMsIDEsIDVdLFxuICBbMywgNCwgNF0sXG4gIFs0LCAzLCAyXSxcbl07XG5cbmZ1bmN0aW9uIGZ3KG5vZGVzOiBudW1iZXIsIGlucHV0czogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10pIHtcbiAgY29uc3QgZndHcmFwaCA9IEFycmF5KG5vZGVzICsgMSlcbiAgICAuZmlsbChbXSlcbiAgICAubWFwKCgpID0+IEFycmF5KG5vZGVzICsgMSkuZmlsbChJTkYpKTtcblxuICBmb3IgKGxldCBhID0gMTsgYSA8PSBub2RlczsgYSsrKSB7XG4gICAgZm9yIChsZXQgYiA9IDE7IGIgPD0gbm9kZXM7IGIrKykge1xuICAgICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgZndHcmFwaFthXVtiXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbYSwgYiwgY10gPSBpbnB1dHNbaV07XG4gICAgZndHcmFwaFthXVtiXSA9IGM7XG4gIH1cblxuICBmb3IgKGxldCBrID0gMTsgayA8PSBub2RlczsgaysrKSB7XG4gICAgZm9yIChsZXQgYSA9IDE7IGEgPD0gbm9kZXM7IGErKykge1xuICAgICAgZm9yIChsZXQgYiA9IDE7IGIgPD0gbm9kZXM7IGIrKykge1xuICAgICAgICBmd0dyYXBoW2FdW2JdID0gTWF0aC5taW4oZndHcmFwaFthXVtiXSwgZndHcmFwaFthXVtrXSArIGZ3R3JhcGhba11bYl0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmd0dyYXBoO1xufVxuXG5jb25zb2xlLnRpbWUoXCJmd1wiKTtcbmNvbnNvbGUubG9nKFwiZncgcmVzdWx0XCIsIGZ3KDQsIGZ3SW5wdXRzKSk7XG5jb25zb2xlLnRpbWVFbmQoXCJmd1wiKTtcblxuLy8g66+4656YIOuPhOyLnFxuXG4vLyAx67KIIC0+IEvrsogg7LWc64uoIOqxsOumrFxuLy8gS+uyiCAtPiBY67KIIOy1nOuLqCDqsbDrpqxcblxuY29uc3QgaW5wdXRzOiBbbnVtYmVyLCBudW1iZXJdW10gPSBbXG4gIFsxLCAyXSxcbiAgWzEsIDNdLFxuICBbMSwgNF0sXG4gIFsyLCA0XSxcbiAgWzMsIDRdLFxuICBbMywgNV0sXG4gIFs0LCA1XSxcbiAgWzQsIDZdLFxuXTtcbmNvbnN0IE4gPSA2O1xuY29uc3QgWCA9IDQ7XG5jb25zdCBLID0gNTtcblxuZnVuY3Rpb24gZnV0dXJlQ2l0eShpbnA6IFtudW1iZXIsIG51bWJlcl1bXSwgbWlkZGxlOiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gIGNvbnN0IGNpdHlHcmFwaCA9IEFycmF5KDEwMSkuZmlsbChbXSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW2EsIGJdID0gaW5wW2ldO1xuICAgIGNpdHlHcmFwaFthXSA9IFsuLi5jaXR5R3JhcGhbYV0sIGJdO1xuICAgIGNpdHlHcmFwaFtiXSA9IFsuLi5jaXR5R3JhcGhbYl0sIGFdO1xuICB9XG5cbiAgY29uc3QgZnJvbVN0YXJ0ID0gZGlqKDEsIGNpdHlHcmFwaCk7XG4gIGNvbnN0IGZyb21NaWRkbGUgPSBkaWoobWlkZGxlLCBjaXR5R3JhcGgpO1xuXG4gIHJldHVybiBmcm9tU3RhcnRbbWlkZGxlXSArIGZyb21NaWRkbGVbZW5kXTtcbn1cblxuZnVuY3Rpb24gZGlqKHN0YXJ0OiBudW1iZXIsIGdyOiBudW1iZXJbXVtdKSB7XG4gIGNvbnN0IGRpc3RzID0gQXJyYXkoMTAxKS5maWxsKElORik7XG4gIGNvbnN0IHF1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUoKTtcbiAgcXVldWUuYWRkKFswLCBzdGFydF0pO1xuICBkaXN0c1tzdGFydF0gPSAwO1xuXG4gIHdoaWxlIChxdWV1ZS5zaXplKCkgPiAwKSB7XG4gICAgY29uc3QgW2Rpc3QsIG5vd10gPSBxdWV1ZS5wb3AoKSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXG4gICAgaWYgKGRpc3RzW25vd10gPCBkaXN0KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyW25vd10ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5leHQgPSBncltub3ddW2ldO1xuICAgICAgY29uc3QgY29zdCA9IGRpc3QgKyAxO1xuICAgICAgaWYgKGNvc3QgPCBkaXN0c1tuZXh0XSkge1xuICAgICAgICBkaXN0c1tuZXh0XSA9IGNvc3Q7XG4gICAgICAgIHF1ZXVlLmFkZChbY29zdCwgbmV4dF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGlzdHM7XG59XG5cbmZ1bmN0aW9uIGZ1dHVyZUNpdHlGdyhcbiAgaW5wOiBbbnVtYmVyLCBudW1iZXJdW10sXG4gIG5vZGVzOiBudW1iZXIsXG4gIG1pZGRsZTogbnVtYmVyLFxuICBlbmQ6IG51bWJlclxuKSB7XG4gIGNvbnN0IGZ3R3JhcGggPSBBcnJheShub2RlcyArIDEpXG4gICAgLmZpbGwoW10pXG4gICAgLm1hcCgoKSA9PiBBcnJheShub2RlcyArIDEpLmZpbGwoSU5GKSk7XG5cbiAgZm9yIChsZXQgYSA9IDE7IGEgPD0gbm9kZXM7IGErKykge1xuICAgIGZvciAobGV0IGIgPSAxOyBiIDw9IG5vZGVzOyBiKyspIHtcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIGZ3R3JhcGhbYV1bYl0gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW2EsIGJdID0gaW5wW2ldO1xuICAgIGZ3R3JhcGhbYV1bYl0gPSAxO1xuICAgIGZ3R3JhcGhbYl1bYV0gPSAxO1xuICB9XG5cbiAgZm9yIChsZXQgayA9IDE7IGsgPD0gbm9kZXM7IGsrKykge1xuICAgIGZvciAobGV0IGEgPSAxOyBhIDw9IG5vZGVzOyBhKyspIHtcbiAgICAgIGZvciAobGV0IGIgPSAxOyBiIDw9IG5vZGVzOyBiKyspIHtcbiAgICAgICAgZndHcmFwaFthXVtiXSA9IE1hdGgubWluKGZ3R3JhcGhbYV1bYl0sIGZ3R3JhcGhbYV1ba10gKyBmd0dyYXBoW2tdW2JdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZndHcmFwaFsxXVttaWRkbGVdICsgZndHcmFwaFttaWRkbGVdW2VuZF07XG59XG5cbmNvbnNvbGUudGltZShcImZ1dHVyZUNpdHlcIik7XG5jb25zb2xlLmxvZyhmdXR1cmVDaXR5KGlucHV0cywgSywgWCkpO1xuY29uc29sZS50aW1lRW5kKFwiZnV0dXJlQ2l0eVwiKTtcblxuY29uc29sZS50aW1lKFwiZnV0dXJlQ2l0eUZ3XCIpO1xuY29uc29sZS5sb2coZnV0dXJlQ2l0eUZ3KGlucHV0cywgTiwgSywgWCkpO1xuY29uc29sZS50aW1lRW5kKFwiZnV0dXJlQ2l0eUZ3XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/shortest_path.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/shortest_path.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;